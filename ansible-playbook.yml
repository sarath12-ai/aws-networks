---
# ansible-playbook.yml

- name: Set up Docker and deploy container on EC2
  hosts: ec2
  become: true
  gather_facts: yes # It is good practice to gather facts to ensure correct OS detection
  tasks:
    # Update yum packages for Amazon Linux
    - name: Update yum packages (Amazon Linux)
      ansible.builtin.yum:
        name: "*"
        state: latest

    # Install Docker
    - name: Install Docker
      ansible.builtin.yum:
        name: docker
        state: present

    # Start Docker service
    - name: Start Docker service
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes

    # Copy Dockerfile to EC2
    - name: Copy Dockerfile to EC2
      ansible.builtin.copy:
        src: ./Dockerfile # Adjust path if necessary
        dest: /home/ec2-user/Dockerfile
        owner: ec2-user
        mode: "0644"

    # Copy application code to EC2
    - name: Copy application code to EC2
      ansible.builtin.copy:
        src: ./app # Adjust path if necessary
        dest: /home/ec2-user/
        owner: ec2-user
        mode: "0644"

    # Build Docker image
    - name: Build Docker image
      ansible.builtin.command:
        cmd: docker build -t basicapp:latest /home/ec2-user/

    # Stop and remove existing Docker container (if any)
    - name: Stop and remove existing Docker container
      ansible.builtin.shell: |
        CONTAINER_ID=$(docker ps -q -f "publish=80")
        if [ -n "$CONTAINER_ID" ]; then
          echo "Stopping and removing existing container with ID: $CONTAINER_ID"
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID
        else
          echo "No container found running on port 80"
        fi

    # Run Docker container
    - name: Run Docker container
      ansible.builtin.command:
        cmd: docker run -d -p 80:80 basicapp:latest
